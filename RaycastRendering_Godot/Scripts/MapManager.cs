using Godot;
using System;

namespace Scripts;

[Tool]
public partial class MapManager : Node2D
{
	[Export] public PackedScene TilePrefab { get; set; }
	[Export] public PackedScene WallPrefab { get; set; }
	[Export] public PackedScene FloorPrefab { get; set; }

	private int[,] Tiles { get; set; }

	// Called when the node enters the scene tree for the first time.
	public override void _Ready()
	{
		Tiles = new int[,] {
			{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
			{00,11,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,00,00,11,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,00},
			{00,11,11,00,00,11,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,00,00,00,00,00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,00},
			{00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,00,00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00,00,00,00,00,00,00},
			{00,11,11,11,00,11,11,11,00,00,00,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,00,11,11,11,00,11,00,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,00,11,11,11,00,11,00,11,11,11,11,11,11,00,00,11,11,00},
			{00,11,11,11,00,11,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,00},
			{00,11,11,11,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,11,11,11,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00},
			{00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
		};

		for (int i = 0; i < Tiles.GetLength(1); i++)
		{
			for (int j = 0; j < Tiles.GetLength(0); j++)
			{
				Sprite2D tile = Tiles[j, i] == 00 ? WallPrefab.Instantiate<Sprite2D>() : FloorPrefab.Instantiate<Sprite2D>();
				tile.Position = new Vector2(10 * i, 10 * j);

				AddChild(tile);
			}
		}

	}

	// Called every frame. 'delta' is the elapsed time since the previous frame.
	public override void _Process(double delta)
	{
	}
}
